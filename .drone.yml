---
# Quick checks to make before spending time on test and package.clone:
# on failure -> failed-pre-checks pipeline
# on success --> cargo-test (parallel) ---> [ test-package-success | test-package-failure ]
#            \-> package  (parallel) ----/
kind: pipeline
type: docker
name: pre-checks

# Steps perform as fast serially, due to file thrashing.
steps:
  - name: cargo-fmt
    image: casperlabs/node-build-u1804
    commands:
      - rustup component add rustfmt
      - cargo fmt --all -- --check

  - name: cargo-clippy
    image: casperlabs/node-build-u1804
    environment:
      RUSTFLAGS: '-D warnings'
    commands:
      - make setup-rs
      - rustup component add clippy
      - cargo clippy --all-targets --all-features --workspace

  - name: cargo-audit
    image: casperlabs/node-build-u1804
    commands:
      - cargo install cargo-audit
      - cargo generate-lockfile
      - cargo audit

trigger:
  branch:
    - OP-2032-test-tomvasile
  event:
    exclude:
      - tag

---
# Packaging pipeline, runs in parallel with cargo-test pipeline
kind: pipeline
type: docker
name: package

steps:
- name: build-deb-update-revision
  image: casperlabs/node-build-u1804
  commands:
    - "./update-rev.sh"

- name: build-deb
  image: casperlabs/node-build-u1804
  commands:
    - make setup-rs
    - "make deb"

- name: put-drone-s3-cache
  image: plugins/s3-sync:latest
  settings:
    bucket: 
      from_secret: put-drone-s3-bucket
    access_key:
      from_secret: put-drone-aws-ak
    secret_key:
      from_secret: put-drone-aws-sk
    region: us-east-2
    source: target/debian/
    target: "/drone_temp/${DRONE_BUILD_NUMBER}_${DRONE_REPO_OWNER}_${DRONE_REPO_NAME}/debian/"

- name: get-and-del-drone-s3-cache
  image: casperlabs/s3cmd-build:latest
  commands:
    - ls -al ./target/debian/
    #- rm -f ./target/debian/*
    #- ls -al ./target/debian/
    - echo "$AWS_BUCKET"
    - s3cmd sync "s3://$AWS_BUCKET/drone_temp/${DRONE_BUILD_NUMBER}_${DRONE_REPO_OWNER}_${DRONE_REPO_NAME}/debian/" "./target/debian/"
    - ls -al ./target/debian/
    #- ./ci/drone_s3_storage.sh del
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: put-drone-aws-ak
    AWS_SECRET_ACCESS_KEY:
      from_secret: put-drone-aws-sk
    AWS_DEFAULT_REGION: "us-east-2"
    AWS_BUCKET:
      from_secret: put-drone-s3-bucket

depends_on:
  - pre-checks

trigger:
  branch:
    - OP-2032-test-tomvasile
  event:
    exclude:
      - tag
